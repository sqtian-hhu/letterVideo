<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="
       http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop.xsd">


<!--spring的配置文件-->


    <!--配置加载db.properties,读取放在db配置文件里的数据源信息-->
    <context:property-placeholder location="classpath:*.properties" />

    <!--dao层配置文件开始-->
    <!--    1，配置连接池-->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
        <property name="driverClassName" value="${jdbc.driver}" />
        <property name="url" value="${jdbc.url}" />
        <property name="username" value="${jdbc.username}" />
        <property name="password" value="${jdbc.password}" />
        <!-- 最大并发连接数 -->
        <property name="maxActive" value="30" />
        <!-- 最小空闲连接数 -->
        <property name="minIdle" value="5" />
        <!-- 用于显示数据源监控中的sql语句监控 -->
        <property name="filters" value="stat" />


    </bean>

    <!--    2,配置生产SqlSession对象的工厂-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <!--扫描pojo包给所有pojo包对象取别名-->
        <property name="typeAliasesPackage" value="com.admin.pojo"/>
    </bean>

    <!--    3,扫描接口包路径，生成包下所有接口的代理对象，并且放入spring容器中-->

    <!--使用tk.mybatis插件后,将原来的org.mybatis.spring.mapper.MapperScannerConfigurer
    改为tk.mybatis.spring.mapper.MapperScannerConfigurer-->
    <bean class="tk.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
        <property name="basePackage" value="com.admin.mapper"/>
    </bean>
    <!--dao层配置文件结束-->

    <!-- ********************************* -->
    <!--service层配置开始-->
    <!--    1,组件扫描配置-->
    <context:component-scan base-package="com.admin.service"/>
    <!--    2，aop面向切面编程，切面就是切入点和通知的组合-->
    <!--配置事务管理器-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>
    <!--配置事务的通知-->
    <tx:advice id="advice">
        <tx:attributes>
<!--            <tx:method name="save" propagation="REQUIRED"/>-->
<!--            <tx:method name="update" propagation="REQUIRED"/>-->
<!--            <tx:method name="del" propagation="REQUIRED"/>-->
<!--            <tx:method name="find" read-only="true"/>-->
<!--            <tx:method name="*" propagation="REQUIRED"/>-->
            <!-- 传播行为,事务控制管理,原来通过@Transaction在service层里配置过 -->
            <tx:method name="save*" propagation="REQUIRED" />
            <tx:method name="insert*" propagation="REQUIRED" />
            <tx:method name="add*" propagation="REQUIRED" />
            <tx:method name="create*" propagation="REQUIRED" />
            <tx:method name="delete*" propagation="REQUIRED" />
            <tx:method name="update*" propagation="REQUIRED" />
            <tx:method name="display*" propagation="REQUIRED" />
            <tx:method name="do*" propagation="REQUIRED" />
            <tx:method name="query*" propagation="SUPPORTS" read-only="true" />
            <tx:method name="find*" propagation="SUPPORTS" read-only="true" />
            <tx:method name="select*" propagation="SUPPORTS" read-only="true" />
            <tx:method name="get*" propagation="SUPPORTS" read-only="true" />
        </tx:attributes>
    </tx:advice>
    <!--配置切面（切入点+通知）-->
    <aop:config>
        <!--配置切入点-->
        <aop:pointcut id="pointcut" expression="execution(* com.admin.service.impl.*.*(..))"/>
        <!--切面的配置-->
        <aop:advisor advice-ref="advice" pointcut-ref="pointcut"/>
    </aop:config>
    <!--service层配置结束-->

    <!--单独配置一下路径与com.admin不同的sid-->
    <bean id="sid" class="org.n3r.idworker.Sid"></bean>



<!--zookeeper配置 放入spring容器, 项目启动加载的时候就建立和zk的连接-->

    <!--创建重联策略-->
    <bean id="retryPolicy" class="org.apache.curator.retry.ExponentialBackoffRetry">
        <!--每次重试连接的等待时间-->
        <constructor-arg index="0" value="1000"></constructor-arg>
        <!--设置的重连次数-->
        <constructor-arg index="1" value="5"></constructor-arg>

    </bean>

    <!--创建zookeeper客户端-->
    <bean id="client" class="org.apache.curator.framework.CuratorFrameworkFactory"
        factory-method="newClient" init-method="start">
        <constructor-arg index="0" value="112.124.16.124:2181"></constructor-arg>
        <constructor-arg index="1" value="1000"></constructor-arg>
        <constructor-arg index="2" value="1000"></constructor-arg>
        <constructor-arg index="3" ref="retryPolicy"></constructor-arg>
    </bean>

    <!--客户端配置-->
    <bean id="ZKCurator" class="com.admin.utils.ZKCurator">
        <constructor-arg index="0" ref="client"></constructor-arg>
    </bean>





</beans>
